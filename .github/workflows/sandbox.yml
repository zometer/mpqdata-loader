# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Sandbox

# TODO: helm-chart repo input and defaults for deploy job. 

on:
  workflow_dispatch:
    inputs: 
      gradleArgs: 
        description: 'Additional Gradle parameters'     
        required: false
        default: '' 
        type: string
jobs:
  build:

    runs-on: ubuntu-latest
    outputs:
      GROUP: ${{ steps.releaseVars.outputs.GROUP }}
      ARTIFACT: ${{ steps.releaseVars.outputs.ARTIFACT }}
      VERSION: ${{ steps.releaseVars.outputs.VERSION }}
      RELEASE_VERSION: ${{ steps.releaseVars.outputs.RELEASE_VERSION }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Get Build and Release Version
      id: releaseVars
      run: |
        `grep "=" gradle.properties | sed s/^/"export "/g`
        export RELEASE_VERSION=`echo $version | sed -e s/-SNAPSHOT//`
        env
        echo "::set-output name=GROUP::$group"
        echo "::set-output name=ARTIFACT::$artifact"
        echo "::set-output name=VERSION::$version"
        echo "::set-output name=RELEASE_VERSION::$RELEASE_VERSION"
    - name: Set Git User
      run: |
        git config user.name "$GITHUB_ACTOR - RELEASE BUILD"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"      
    - name: Build with Gradle
      uses: gradle/gradle-build-action@4137be6a8bf7d7133955359dbd952c0ca73b1021
      with:
        arguments: build -Prelease.useAutomaticVersion=true ${{ github.event.inputs.gradleArgs }}
    - name: Examine Build directory
      run: | 
        mkdir -p build/ && cp gradle.properties build/gradle-release.properties
        env
        ls -l build/libs build/helm/charts
    - name: Upload Helm Chart Artifact
      uses: actions/upload-artifact@v2.3.1
      with:
        name: helm-chart
        path: build/helm/charts/*.tgz
    - name: Build Docker Image 
      run: |
        `grep "=" build/gradle-release.properties | sed s/^/"export "/g`
        echo "${{ env.GITHUB_REPOSITORY_OWNER }}/$artifact:$version"
        env
        docker build . --file Dockerfile --tag $GITHUB_REPOSITORY_OWNER/$artifact:$version
    - name: Log in to Docker Hub
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Push image to Docker Hub 
      run: |
        `grep "=" build/gradle-release.properties | sed s/^/"export "/g`
        env
        docker push $GITHUB_REPOSITORY_OWNER/$artifact:$version
  deploy-helm-chart: 
    name: Deploy Helm Chart
    runs-on: ubuntu-latest
    needs: build 
    steps: 
      - name: Deploy Init
        run: env
        env: 
          ARTIFACT: ${{needs.build.outputs.ARTIFACT}}
          VERSION: ${{needs.build.outputs.VERSION}}
          RELEASE_VERSION: ${{needs.build.outputs.RELEASE_VERSION}}
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.0
        with:
          name: helm-chart
      - name: Prepare Deployment
        id: prep-helm-deploy
        run: | 
          ls -l ./ 
          tar zxvf $ARTIFACT-$VERSION.tgz
          export description=$(cat $ARTIFACT/Chart.yaml| yq e '.description' - | sed -e s/\"//g) 
          mkdir git-repos
          echo "desc: $description"
          echo "::set-output name=DESCRIPTION::$description"
          echo "::set-output name=CHART_DIR::$(pwd)"
          echo "::set-output name=GIT_REPO_DIR::git-repos"
          ls -la $PWD
        env: 
          ARTIFACT: ${{needs.build.outputs.ARTIFACT}}
          VERSION: ${{needs.build.outputs.VERSION}}
          RELEASE_VERSION: ${{needs.build.outputs.RELEASE_VERSION}}
      - name: Checkout Helm Chart Repo
        id: checkout-helm-repo
        run: |
          cd $GIT_REPO_DIR/
          pwd 
          ls -la 
          git clone https://github.com/${GITHUB_REPOSITORY_OWNER}/${HELM_CHARTS_GIT_REPO}
          cd ${HELM_CHARTS_GIT_REPO}
          git config user.name "$GITHUB_ACTOR - RELEASE BUILD"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"      
          git checkout gh-pages
          ls -la 
        env:
          GITHUB_TOKEN: ${{ secrets.HELM_CHARTS_REPO_TOKEN }}    
          CHART_DIR: ${{ steps.prep-helm-deploy.outputs.CHART_DIR }}
          GIT_REPO_DIR: ${{ steps.prep-helm-deploy.outputs.GIT_REPO_DIR }}
          HELM_CHARTS_GIT_REPO: helm-charts             
      - name: Checkout Helm Chart Repo
        id: checkout-helm-repo
        run: |
          cd $CHART_DIR
          pwd 
          ls -la 
          export CHART_DOWNLOAD_URL="https://github.com/${GITHUB_REPOSITORY_OWNER}/${HELM_CHARTS_GIT_REPO}/releases/download/${ARTIFACT}-${VERSION}"
          echo "helm repo index --url $CHART_DOWNLOAD_URL --merge $GIT_REPO_DIR/${HELM_CHARTS_GIT_REPO}/index.yaml ."
          helm repo index --url $CHART_DOWNLOAD_URL --merge $GIT_REPO_DIR/${HELM_CHARTS_GIT_REPO}/index.yaml .
          cat index.yaml 
        env:
          ARTIFACT: ${{needs.build.outputs.ARTIFACT}}
          VERSION: ${{needs.build.outputs.VERSION}}
          RELEASE_VERSION: ${{needs.build.outputs.RELEASE_VERSION}}
          GITHUB_TOKEN: ${{ secrets.HELM_CHARTS_REPO_TOKEN }}    
          CHART_DIR: ${{ steps.prep-helm-deploy.outputs.CHART_DIR }}
          GIT_REPO_DIR: ${{ steps.prep-helm-deploy.outputs.GIT_REPO_DIR }}
          HELM_CHARTS_GIT_REPO: helm-charts   
